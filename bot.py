from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
players = {}

# –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–∞–≥–∞ –∏ –∏–≥—Ä–æ–∫–∞
BASE_ENEMY_HEALTH = 10
BASE_ENEMY_XP = 5
BASE_ENEMY_GOLD = 2

# –£–ª—É—á—à–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ
UPGRADES = {
    'sword': {'name': '–ú–µ—á +1 —É—Ä–æ–Ω', 'cost': 10, 'damage_increase': 1},
    'armor': {'name': '–ë—Ä–æ–Ω—è (–ø–æ–∑–∂–µ)', 'cost': 15, 'damage_increase': 0},  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    'crit': {'name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä', 'cost': 30, 'damage_increase': 3},
}

def get_player(user_id):
    if user_id not in players:
        players[user_id] = {
            'level': 1,
            'xp': 0,
            'gold': 0,
            'damage': 1,
            'enemy_hp': BASE_ENEMY_HEALTH,
            'enemy_level': 1,
        }
    return players[user_id]

def enemy_stats(level):
    health = BASE_ENEMY_HEALTH + (level - 1) * 5
    xp = BASE_ENEMY_XP + (level - 1) * 3
    gold = BASE_ENEMY_GOLD + (level - 1) * 2
    return health, xp, gold

def level_up(player):
    # –ü—Ä–æ—Å—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å: –∫–∞–∂–¥—ã–µ 20 XP - —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö
    while player['xp'] >= player['level'] * 20:
        player['xp'] -= player['level'] * 20
        player['level'] += 1

async def send_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    player = get_player(user_id)

    text = (f"‚öîÔ∏è –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞: {player['level']}\n"
            f"üí• –£—Ä–æ–Ω –∑–∞ –∫–ª–∏–∫: {player['damage']}\n"
            f"‚≠êÔ∏è –û–ø—ã—Ç: {player['xp']}\n"
            f"üí∞ –ó–æ–ª–æ—Ç–æ: {player['gold']}\n\n"
            f"üëπ –í—Ä–∞–≥ (—É—Ä–æ–≤–µ–Ω—å {player['enemy_level']}):\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player['enemy_hp']}")

    keyboard = [
        [InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data='attack')],
        [InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    get_player(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ RPG –∫–ª–∏–∫–µ—Ä. –ù–∞–∂–∏–º–∞–π '–ê—Ç–∞–∫–æ–≤–∞—Ç—å', —á—Ç–æ–±—ã –±–∏—Ç—å –≤—Ä–∞–≥–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–æ–ª–æ—Ç–æ –∏ –æ–ø—ã—Ç!")
    await send_status(update, context)

async def attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    player = get_player(user_id)

    player['enemy_hp'] -= player['damage']
    if player['enemy_hp'] <= 0:
        # –í—Ä–∞–≥ –ø–æ–±–µ–∂–¥—ë–Ω
        enemy_hp, enemy_xp, enemy_gold = enemy_stats(player['enemy_level'])
        player['xp'] += enemy_xp
        player['gold'] += enemy_gold
        player['enemy_level'] += 1
        player['enemy_hp'] = BASE_ENEMY_HEALTH + (player['enemy_level'] - 1) * 5

        level_up(player)
        await query.answer("–í—Ä–∞–≥ –ø–æ–±–µ–∂–¥—ë–Ω! –¢—ã –ø–æ–ª—É—á–∏–ª –∑–æ–ª–æ—Ç–æ –∏ –æ–ø—ã—Ç.")
    else:
        await query.answer(f"–¢—ã –Ω–∞–Ω–µ—Å {player['damage']} —É—Ä–æ–Ω–∞.")

    await send_status(update, context)

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = []
    for key, item in UPGRADES.items():
        keyboard.append([InlineKeyboardButton(f"{item['name']} - {item['cost']} –∑–æ–ª–æ—Ç–∞", callback_data=f"buy_{key}")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:\n–í—ã–±–µ—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
    await query.edit_message_text(text, reply_markup=reply_markup)

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    player = get_player(user_id)

    item_key = query.data.replace('buy_', '')
    if item_key not in UPGRADES:
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏.")
        return

    item = UPGRADES[item_key]
    if player['gold'] < item['cost']:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
        return

    player['gold'] -= item['cost']
    player['damage'] += item['damage_increase']
    await query.answer(f"–¢—ã –∫—É–ø–∏–ª {item['name']}!")

    await send_status(update, context)

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_status(update, context)

def main():
    TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(attack, pattern='^attack$'))
    app.add_handler(CallbackQueryHandler(shop, pattern='^shop$'))
    app.add_handler(CallbackQueryHandler(buy, pattern='^buy_'))
    app.add_handler(CallbackQueryHandler(back, pattern='^back$'))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
